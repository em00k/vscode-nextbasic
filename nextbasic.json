[
  {
    "description": "Displays disk/tape catalogue",
    "token": "CAT",
    "syntax": "CAT"
  },
  {
    "description": "Prepares inserted disk for usage, erasing it",
    "token": "FORMAT",
    "syntax": "FORMAT"
  },
  {
    "description": "Load BASIC program from file named fn",
    "token": "LOAD",
    "syntax": "LOAD fn"
  },
  {
    "modifier": "DATA",
    "description": "Load data from fn into array x()",
    "token": "LOAD",
    "syntax": "LOAD fn DATA x()"
  },
  {
    "modifier": "CODE",
    "description": "Load data from fn into memory at address addr",
    "token": "LOAD",
    "syntax": "LOAD fn CODE addr"
  },
  {
    "modifier": "SCREEN$",
    "description": "Load data from fn onto standard ULA screen",
    "token": "LOAD",
    "syntax": "LOAD fn SCREEN$"
  },
  {
    "modifier": "BANK",
    "description": "Load data from fn into memory bank b at addr",
    "token": "LOAD",
    "syntax": "LOAD fn BANK b,addr"
  },
  {
    "modifier": "LAYER",
    "description": "Load data from fn onto current layer",
    "token": "LOAD",
    "syntax": "LOAD fn LAYER"
  },
  {
    "description": "Loads BASIC lines from file named fn and integrates them with current program",
    "token": "MERGE",
    "syntax": "MERGE fn"
  },
  {
    "modifier": "LINE",
    "description": "Save BASIC program to file named fn (and set up autorun at line l)",
    "token": "SAVE",
    "syntax": "SAVE fn (LINE l)?"
  },
  {
    "modifier": "DATA",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "SAVE",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "description": "Checks loaded basic program matches fn",
    "token": "VERIFY",
    "syntax": "VERIFY fn"
  },
  {
    "modifier": "DATA",
    "description": "Checks data in memory/array matches contents of fn; does not work with SCREEN$/LAYER because the screen is inevitably changed during the verify operation",
    "token": "VERIFY",
    "syntax": "VERIFY fn (DATA/CODE/BANK)"
  },
  {
    "description": "Populates all 64 sprite patterns from bank b, taking 256 bytes per sprite and thus using all data in bank b.",
    "token": "SPRITE BANK",
    "syntax": "SPRITE BANK x"
  },
  {
    "description": "Define n sprite patterns, starting with p, with data from bank b starting at offset o.",
    "token": "SPRITE BANK",
    "syntax": "SPRITE BANK b, o, p, n"
  },
  {
    "description": "Choose the first or second palette for sprites. X must be 0 or 1.",
    "token": "SPRITE PALETTE",
    "syntax": "SPRITE PALETTE x"
  },
  {
    "modifier": "BANK",
    "description": "Load sprite palette x (0 or 1) from bank b at offset o. Data is read as with LAYER PALETTE.",
    "token": "SPRITE PALETTE",
    "syntax": "SPRITE PALETTE x BANK b, o"
  },
  {
    "description": "Set sprite palette n, index i, to color v. V is always 9-bit, even if PALETTE DIM 8 is in effect.",
    "token": "SPRITE PALETTE",
    "syntax": "SPRITE PALETTE n, i, v"
  },
  {
    "description": "Enable or disable sprites. X must be 0 (disable) or 1 (enable).",
    "token": "SPRITE PRINT",
    "syntax": "SPRITE PRINT x"
  },
  {
    "description": "Enable or disable sprites crossing the border. X must be 0 (disable) or 1 (enable).",
    "token": "SPRITE BORDER",
    "syntax": "SPRITE BORDER x"
  },
  {
    "description": "Set sprite f to image i at position x,y with flags f. f is bitmapped as byte 3 of data packets sent to Sprite Attribute Upload ($xx57).",
    "token": "SPRITE",
    "syntax": "SPRITE s, x, y, i, f"
  },
  {
    "description": "Reset all sprite attributes and global settings.",
    "token": "SPRITE CLEAR",
    "syntax": "SPRITE CLEAR"
  },
  {
    "modifier": "RESTORE",
    "description": "Sets DATA read point to start of line x in bank b",
    "token": "BANK",
    "syntax": "BANK b RESTORE x"
  },
  {
    "description": "Stores data in program for later READing",
    "token": "DATA",
    "syntax": "DATA x[,y].."
  },
  {
    "description": "Read next value from DATA statement into variable",
    "token": "READ",
    "syntax": "READ var"
  },
  {
    "description": "Sets DATA read point to start of line x",
    "token": "RESTORE",
    "syntax": "RESTORE x"
  },
  {
    "modifier": "GO TO",
    "description": "Jump execution to line x stored in bank b. b=-1 for main program",
    "token": "BANK",
    "syntax": "BANK b GO TO x"
  },
  {
    "modifier": "GO SUB",
    "description": "Jump execution to line x stored in bank b, storing current location on gosub stack. b=-1 for main program",
    "token": "BANK",
    "syntax": "BANK b GO SUB x"
  },
  {
    "description": "Creates a user defined function based on a parameterised expression. Will not work if moved into any bank other than the main program",
    "token": "DEF FN",
    "syntax": "DEF FN func(param[,param..])=expr"
  },
  {
    "description": "Defines a as an array of length x (and second dimension length y, etc..)",
    "token": "DIM",
    "syntax": "DIM a(x[,y]..)"
  },
  {
    "modifier": "TO",
    "description": "Starts FOR loop between given numeric values (with given step)",
    "token": "FOR",
    "syntax": "FOR var = start TO end [STEP step]?"
  },
  {
    "description": "Jump execution to line X in the same bank",
    "token": "GO TO",
    "syntax": "GO TO x"
  },
  {
    "description": "Jump execution to line X in the same bank, storing current location (and bank) on gosub stack",
    "token": "GO SUB",
    "syntax": "GO SUB x"
  },
  {
    "modifier": "THEN",
    "description": "Run statements only if expression c is true",
    "token": "IF",
    "syntax": "IF c THEN statements.."
  },
  {
    "description": "Sets variable var to expr",
    "token": "LET",
    "syntax": "LET var = expr"
  },
  {
    "description": "Marks end of FOR loop regarding VAR",
    "token": "NEXT",
    "syntax": "NEXT var"
  },
  {
    "description": "Code comment, ignored",
    "token": "REM",
    "syntax": "REM comment"
  },
  {
    "description": "Restore execution location (line and bank) from gosub stack",
    "token": "RETURN",
    "syntax": "RETURN"
  },
  {
    "modifier": "AT",
    "description": "Draw the entire screen from the tilemap (from tile offset (x,y))",
    "token": "TILE",
    "syntax": "TILE [AT x,y]?"
  },
  {
    "modifier": "AT",
    "description": "Draw a section of the tilemap w,h wide (from tile offset x,y in the tilemap) (to tile offset x2,y2 on the screen)",
    "token": "TILE",
    "syntax": "TILE w,h [AT x,y]? [TO x2,y2]?"
  },
  {
    "description": "Set bank n as the root of tile graphics (which may occupy up to 4 banks in the case of 16x16 tiles).",
    "token": "TILE BANK",
    "syntax": "TILE BANK n"
  },
  {
    "description": "Set bank n offset o as the root of tilemap data, with tilemap width v and tile size t (t must be 8 or 16 for 8x8 or 16x16 tiles)",
    "token": "TILE DIM",
    "syntax": "TILE DIM n, o, v, t"
  },
  {
    "description": "Prints screen",
    "token": "COPY",
    "syntax": "COPY"
  },
  {
    "description": "Returns currently pressed key",
    "token": "INKEY",
    "syntax": "INKEY$"
  },
  {
    "description": "Output expression(s) and read a variable",
    "token": "INPUT",
    "syntax": "INPUT specifier [connector specifier].."
  },

  {
    "modifier": "AT",
    "syntax": "INPUT AT x,y",
    "description": "Moves text cursor to the given text cell",
    "token": "INPUT"
  },
  {
    "modifier": "TAB",
    "syntax": "INPUT TAB x",
    "description": "Inserts spaces until text cursor is in column x",
    "token": "INPUT"
  },
  {
    "modifier": "INK",
    "syntax": "INPUT INK x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "INPUT"
  },
  {
    "modifier": "PAPER",
    "syntax": "INPUT PAPER x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "INPUT"
  },
  {
    "modifier": "LINE",
    "syntax": "INPUT LINE x$",
    "description": "INPUT only, reads a string without the prompting quotes ",
    "token": "INPUT"
  },

  {
    "description": "Enable or disable switching ink/paper color when printing (x=0 or 1)",
    "token": "INVERSE",
    "syntax": "INVERSE x"
  },
  {
    "description": "Output expression(s) to printer",
    "token": "LPRINT",
    "syntax": "LPRINT specifier [connector specifier].."
  },
  {
    "description": "Enable or disable overprinting (x=0 or 1)",
    "token": "OVER",
    "syntax": "OVER x"
  },
  {
    "description": "Waits x frames or until a key is pressed",
    "token": "PAUSE",
    "syntax": "PAUSE x"
  },
  {
    "description": "Output expression(s)",
    "token": "PRINT",
    "syntax": "PRINT specifier [connector specifier].."
  },
  {
    "modifier": "AT",
    "syntax": "PRINT AT x,y",
    "description": "Moves text cursor to the given text cell",
    "token": "PRINT"
  },
  {
    "modifier": "TAB",
    "syntax": "PRINT TAB x",
    "description": "Inserts spaces until text cursor is in column x",
    "token": "PRINT"
  },
  {
    "modifier": "INK",
    "syntax": "PRINT INK x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "PRINT"
  },
  {
    "modifier": "PAPER",
    "syntax": "PRINT PAPER x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "PRINT"
  },
  {
    "modifier": "LINE",
    "syntax": "PRINT LINE x$",
    "description": "INPUT only, reads a string without the prompting quotes ",
    "token": "PRINT"
  },
  {
    "description": "Re-enable RAMdisk having been disabled by previous BANK 1346 USR",
    "token": "BANK 1346 FORMAT",
    "syntax": "BANK 1346 FORMAT"
  },
  {
    "description": "Disable RAMdisk, allowing banks 1, 3, 4, and 6 to be used",
    "token": "BANK 1346 USR",
    "syntax": "BANK 1346 USR"
  },
  {
    "modifier": "COPY TO",
    "description": "Copy entire bank b to bank c",
    "token": "BANK",
    "syntax": "BANK b COPY TO c"
  },
  {
    "modifier": "COPY",
    "description": "Copy len bytes from start in bank b, to start in bank c",
    "token": "BANK",
    "syntax": "BANK b COPY start, len TO c, start"
  },
  {
    "modifier": "ERASE",
    "description": "Erase all data in bank by overwriting with zeros (or x)",
    "token": "BANK",
    "syntax": "BANK b ERASE x?"
  },
  {
    "modifier": "ERASE",
    "description": "Overwrite len bytes of data at off in bank b with value",
    "token": "BANK",
    "syntax": "BANK b ERASE off, len, value"
  },
  {
    "modifier": "PEEK",
    "description": "Returns value at given address in bank b (address is from start of bank)",
    "token": "BANK",
    "syntax": "BANK b PEEK addr"
  },
  {
    "modifier": "POKE",
    "description": "Sets address in bank b to value (address is from start of bank)",
    "token": "BANK",
    "syntax": "BANK b POKE addr, value"
  },
  {
    "description": "Returns current value at port",
    "token": "IN",
    "syntax": "IN port"
  },
  {
    "description": "Returns value at given address",
    "token": "PEEK",
    "syntax": "PEEK addr"
  },
  {
    "description": "Sets address to value",
    "token": "POKE",
    "syntax": "POKE addr, value"
  },
  {
    "description": "Sends value to port",
    "token": "OUT",
    "syntax": "OUT port, value"
  },
  {
    "modifier": "LINE",
    "description": "Copies lines x,y into bank b. Once this is done, these lines cannot be edited except by overwriting them with another BANK..LINE command. Cannot be used in a program.",
    "token": "BANK",
    "syntax": "BANK b LINE x,y"
  },
  {
    "modifier": "LIST",
    "description": "Lists source code in bank b (from line x)",
    "token": "BANK",
    "syntax": "BANK b LIST x?"
  },
  {
    "modifier": "MERGE",
    "description": "Adds all basic lines in bank b to main program",
    "token": "BANK",
    "syntax": "BANK b MERGE"
  },
  {
    "description": "Repeats last command or restarts from error location",
    "token": "CONTINUE",
    "syntax": "CONTINUE"
  },
  {
    "description": "Resets variables, clears screen, resets plot cursor (and sets ramtop to X)",
    "token": "CLEAR",
    "syntax": "CLEAR x?"
  },
  {
    "description": "Deletes all program lines between f and l. Cannot be used in a program.",
    "token": "ERASE",
    "syntax": "ERASE f, l"
  },
  {
    "description": "Lists source code (from line x)",
    "token": "LIST",
    "syntax": "LIST x?"
  },
  {
    "description": "Lists source code to printer (from line x)",
    "token": "LLIST",
    "syntax": "LLIST x?"
  },
  {
    "description": "Clear stored program",
    "token": "NEW",
    "syntax": "NEW"
  },
  {
    "description": "CLEAR then run program (from line x)",
    "token": "RUN",
    "syntax": "RUN x?"
  },
  {
    "description": "Set ULA border to color N",
    "token": "BORDER",
    "syntax": "BORDER n"
  },
  {
    "description": "Enable or disable bright colors. n must be 0 or 1. Not legal on non-ULA layers or if Enhanced ULA is enabled.",
    "token": "BRIGHT",
    "syntax": "BRIGHT n"
  },
  {
    "description": "Draw circle centered at x, y with radius r",
    "token": "CIRCLE",
    "syntax": "CIRCLE x,y,r"
  },
  {
    "description": "Clears screen",
    "token": "CLS",
    "syntax": "CLS"
  },
  {
    "description": "Draw line from plot cursor to given coordinate",
    "token": "DRAW",
    "syntax": "DRAW [modifier or x,y].."
  },
  {
    "description": "Enable or disable ink/paper cycling. n must be 0 or 1. Not legal on non-ULA layers or if Enhanced ULA is enabled.",
    "token": "FLASH",
    "syntax": "FLASH n"
  },
  {
    "description": "Set ink (foreground) color for print and graphics commands. If Enhanced ULA is enabled, this can use any legal palette value. On Layer 2, it can use any value 0-255.",
    "token": "INK",
    "syntax": "INK c"
  },
  {
    "description": "Selects active layer for graphics operations. LAYER 0 is an unenhanced ULA screen. LAYER 1 is the ULA screen but with enhancements and with the origin at the top left (not the bottom left). LAYER 2 is, well, Layer 2.",
    "token": "LAYER",
    "syntax": "LAYER x"
  },
  {
    "description": "Sets mode for Layer 1 based on x. 1 = Standard Spectrum, 2 = Timex hires, 3 = Timex hicolour, 0 = Lores layer.",
    "token": "LAYER 1",
    "syntax": "LAYER 1,x"
  },
  {
    "description": "Selects Layer 2 and determines if it is displayed or not (x must be 0 or 1)",
    "token": "LAYER 2",
    "syntax": "LAYER 2,x"
  },
  {
    "description": "Sets the scroll display offset for the current layer.",
    "token": "LAYER AT",
    "syntax": "LAYER AT x, y"
  },
  {
    "description": "Only when Layer 2 is selected, selects the first bank for layer 2 (f) and shadow layer 2 (b). Note that a layer 2 screen occupies 3 banks.",
    "token": "LAYER BANK",
    "syntax": "LAYER BANK f, b"
  },
  {
    "description": "Resets all layer settings",
    "token": "LAYER CLEAR",
    "syntax": "LAYER CLEAR"
  },
  {
    "description": "Sets visible area for current layer",
    "token": "LAYER DIM",
    "syntax": "LAYER DIM left, top, right, bottom"
  },
  {
    "description": "Fills a region at x,y, of size w,h, with palette index f (or the transparent value)",
    "token": "LAYER ERASE",
    "syntax": "LAYER ERASE x, y, w, h [,f]?"
  },
  {
    "description": "Sets layer ordering",
    "token": "LAYER OVER",
    "syntax": "LAYER OVER"
  },
  {
    "description": "Choose which of the two palettes is used for the active layer (x must be 0 or 1)",
    "token": "LAYER PALETTE",
    "syntax": "LAYER PALETTE x"
  },
  {
    "description": "Sets palette index i in palette in to color value v. V is always 9 bit, even if PALETTE DIM 8 is set.",
    "token": "LAYER PALETTE",
    "syntax": "LAYER PALETTE n, i, v"
  },
  {
    "modifier": "BANK",
    "description": "Loads current layer's palette n (0 or 1) from bytes starting at offset in bank b. If PALETTE DIM 8 is set, each byte is one color. If PALETTE DIM 9 is set, each color needs two bytes, but only one bit of the second is used.",
    "token": "LAYER PALETTE",
    "syntax": "LAYER PALETTE n BANK b, offset"
  },
  {
    "description": "Resets all palettes and palette settings",
    "token": "PALETTE CLEAR",
    "syntax": "PALETTE CLEAR"
  },
  {
    "description": "Sets number of color bits in the active palette; x must be 8 or 9",
    "token": "PALETTE DIM",
    "syntax": "PALETTE DIM x"
  },
  {
    "description": "Enables Enhanced ULA colors with x inks. X must be a bitmask which masks off bits on the right of a value (1, 3, 7, 15, 31, 63, 127 or 255)",
    "token": "PALETTE FORMAT",
    "syntax": "PALETTE FORMAT x"
  },
  {
    "description": "Sets the global transparency color to x",
    "token": "PALETTE OVER",
    "syntax": "PALETTE OVER x"
  },
  {
    "description": "Set paper (background) color for print and graphics commands. Follows the same rules as INK.",
    "token": "PAPER",
    "syntax": "PAPER c"
  },
  {
    "description": "Plot listed points as single pixels on current layer",
    "token": "PLOT",
    "syntax": "PLOT [modifier or x,y].."
  },
  {
    "description": "Stores the color at point x, y on the ULA screen in variable var",
    "token": "POINT",
    "syntax": "POINT x, y, var"
  },
  {
    "description": "Returns the color at point x, y on the ULA screen",
    "token": "POINT",
    "syntax": "POINT x, y"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "AND",
    "syntax": "AND"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "OR",
    "syntax": "OR"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "NOT",
    "syntax": "NOT"
  },
  {
    "token": "MOD",
    "syntax": "MOD x",
    "description": "Gets the modulo which returns the remainder of a division"
  },
  {
    "description": "Gets unsigned magnitude of x",
    "token": "ABS",
    "syntax": "ABS x"
  },
  {
    "modifier": "ACS",
    "description": "Returns inverse trigonometric ratio (arcsin, arccos, arctan)",
    "token": "ASN",
    "syntax": "ASN x, ACS x, ATN x"
  },
  {
    "description": "Returns attribute cell value at cell x,y",
    "token": "ATTR",
    "syntax": "ATTR x,y"
  },
  {
    "description": "Converts binary number x to decimal",
    "token": "BIN",
    "syntax": "BIN x"
  },
  {
    "description": "Gets character for an ASCII code",
    "token": "CHR$",
    "syntax": "CHR$ x"
  },
  {
    "description": "Gets ASCII code for a character",
    "token": "CODE",
    "syntax": "CODE x"
  },
  {
    "description": "Rounds x down to integer",
    "token": "INT",
    "syntax": "INT x"
  },
  {
    "description": "Gets length of string",
    "token": "LEN",
    "syntax": "LEN x"
  },
  {
    "description": "Returns approximation of pi",
    "token": "PI",
    "syntax": "PI"
  },
  {
    "description": "Returns a random number between 0 and 1",
    "token": "RND",
    "syntax": "RND"
  },
  {
    "description": "Returns text character in text cell x,y",
    "token": "SCREEN$",
    "syntax": "SCREEN$ x,y"
  },
  {
    "description": "Divides x by its magnitude",
    "token": "SIGN",
    "syntax": "SIGN x"
  },
  {
    "description": "Returns standard trigonometric ratio (sine)",
    "token": "SIN",
    "syntax": "SIN x"
  },
  {
    "description": "Returns standard trigonometric ratio (cosine)",
    "token": "COS",
    "syntax": "COS x"
  },
  {
    "description": "Returns standard trigonometric ratio (tangent)",
    "token": "TAN",
    "syntax": "TAN x"
  },
  {
    "description": "Returns square of x",
    "token": "SQR",
    "syntax": "SQR x"
  },
  {
    "description": "Converts number into a string",
    "token": "STR$",
    "syntax": "STR$ x"
  },
  {
    "description": "If x is a string, gets the address of the first byte of the user defined graphic for the character. If x is a number, runs a machine code routine at address x and returns the value of BC after it exits.",
    "token": "USR",
    "syntax": "USR x"
  },
  {
    "description": "Converts string number or expression into a number",
    "token": "VAL",
    "syntax": "VAL x"
  }
]
