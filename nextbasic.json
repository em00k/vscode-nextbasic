[
  {
    "description": "Displays disk/tape catalogue",
    "token": "CAT",
    "syntax": "CAT"
  },
  {
    "description": "Prepares inserted disk for usage, erasing it",
    "token": "FORMAT",
    "syntax": "FORMAT"
  },
  {
    "description": "Load BASIC program from file named fn",
    "token": "LOAD",
    "syntax": "LOAD fn"
  },
  {
    "modifies": "LOAD",
    "description": "Load data from fn into array x()",
    "token": "DATA",
    "syntax": "LOAD fn DATA x()"
  },
  {
    "modifies": "LOAD",
    "description": "Load data from fn into memory at address addr",
    "token": "CODE",
    "syntax": "LOAD fn CODE addr"
  },
  {
    "modifies": "LOAD",
    "description": "Load data from fn onto standard ULA screen",
    "token": "SCREEN$",
    "syntax": "LOAD fn SCREEN$"
  },
  {
    "modifies": "LOAD",
    "description": "Load data from fn into memory bank b at addr",
    "token": "BANK",
    "syntax": "LOAD fn BANK b,addr"
  },
  {
    "modifies": "LOAD",
    "description": "Load data from fn onto current layer",
    "token": "LAYER",
    "syntax": "LOAD fn LAYER"
  },
  {
    "description": "Loads BASIC lines from file named fn and integrates them with current program",
    "token": "MERGE",
    "syntax": "MERGE fn"
  },
  {
    "modifies": "SAVE",
    "description": "Save BASIC program to file named fn (and set up autorun at line l)",
    "token": "LINE",
    "syntax": "SAVE fn (LINE l)?"
  },
  {
    "modifies": "SAVE",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "DATA",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "modifies": "SAVE",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "CODE",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "modifies": "SAVE",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "SCREEN$",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "modifies": "SAVE",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "BANK",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "modifies": "SAVE",
    "description": "Save data as specified; CODE and BANK have an extra \"length\" parameter",
    "token": "LAYER",
    "syntax": "SAVE fn (DATA/CODE/SCREEN$/BANK/LAYER..)"
  },
  {
    "description": "Checks loaded basic program matches fn",
    "token": "VERIFY",
    "syntax": "VERIFY fn"
  },
  {
    "modifies": "VERIFY",
    "description": "Checks data in memory/array matches contents of fn; does not work with SCREEN$/LAYER because the screen is inevitably changed during the verify operation",
    "token": "DATA",
    "syntax": "VERIFY fn (DATA/CODE/BANK)"
  },
  {
    "modifies": "VERIFY",
    "description": "Checks data in memory/array matches contents of fn; does not work with SCREEN$/LAYER because the screen is inevitably changed during the verify operation",
    "token": "CODE",
    "syntax": "VERIFY fn (DATA/CODE/BANK)"
  },
  {
    "modifies": "VERIFY",
    "description": "Checks data in memory/array matches contents of fn; does not work with SCREEN$/LAYER because the screen is inevitably changed during the verify operation",
    "token": "BANK",
    "syntax": "VERIFY fn (DATA/CODE/BANK)"
  },
  {
    "description": "Define n sprite patterns, starting with p, with data from bank b starting at offset o.",
    "token": "BANK",
    "modifies": "SPRITE",
    "syntax": "SPRITE BANK b, o, p, n"
  },
  {
    "modifies": "BANK",
    "description": "Load sprite palette x (0 or 1) from bank b at offset o. Data is read as with LAYER PALETTE.",
    "token": "SPRITE PALETTE",
    "syntax": "SPRITE PALETTE x BANK b, o"
  },
  {
    "description": "Set sprite palette n, index i, to color v. V is always 9-bit, even if PALETTE DIM 8 is in effect.",
    "token": "PALETTE",
    "modifies": "SPRITE",
    "syntax": "SPRITE PALETTE n, i, v"
  },
  {
    "description": "Enable or disable sprites. X must be 0 (disable) or 1 (enable).",
    "token": "PRINT",
    "modifies": "SPRITE",
    "syntax": "SPRITE PRINT x"
  },
  {
    "description": "Enable or disable sprites crossing the border. X must be 0 (disable) or 1 (enable).",
    "token": "BORDER",
    "modifies": "SPRITE",
    "syntax": "SPRITE BORDER x"
  },
  {
    "description": "Set sprite s to position (x,y), pattern p, x-scaling mx and y-scaling my. If the sprite id s is negative, this sprite is a relative sprite, and its position is relative to the previous anchor sprite (defined with a positive sprite id).",
    "token": "SPRITE",
    "syntax": "SPRITE s, x, y, p, f, rf, mx, my"
  },
  {
    "description": "Reset all sprite attributes and global settings.",
    "token": "CLEAR",
    "modifies": "SPRITE",
    "syntax": "SPRITE CLEAR"
  },
  {
    "token": "RESTORE",
    "description": "Sets DATA read point to start of line x in bank b",
    "modifies": "BANK",
    "syntax": "BANK b RESTORE x"
  },
  {
    "description": "Stores data in program for later READing",
    "token": "DATA",
    "syntax": "DATA x[,y].."
  },
  {
    "description": "Read next value from DATA statement into variable",
    "token": "READ",
    "syntax": "READ var"
  },
  {
    "description": "Sets DATA read point to start of line x",
    "token": "RESTORE",
    "syntax": "RESTORE x"
  },
  {
    "modifies": "BANK",
    "description": "Jump execution to line x stored in bank b. b=-1 for main program",
    "token": "GO TO",
    "syntax": "BANK b GO TO x"
  },
  {
    "modifies": "BANK",
    "description": "Jump execution to line x stored in bank b, storing current location on gosub stack. b=-1 for main program",
    "token": "SUB",
    "syntax": "BANK b GO SUB x"
  },
  {
    "description": "Creates a user defined function based on a parameterised expression. Will not work if moved into any bank other than the main program",
    "token": "FN",
    "modifies": "DEF",
    "syntax": "DEF FN func(param[,param..])=expr"
  },
  {
    "description": "Defines a as an array of length x (and second dimension length y, etc..)",
    "token": "DIM",
    "syntax": "DIM a(x[,y]..)"
  },
  {
    "modifies": "FOR",
    "description": "Starts FOR loop between given numeric values (with given step)",
    "token": "TO",
    "syntax": "FOR var = start TO end [STEP step]?"
  },
  {
    "description": "Jump execution to line X in the same bank",
    "token": "TO",
    "modifies": "GO",
    "syntax": "GO TO x"
  },
  {
    "description": "Jump execution to line X in the same bank, storing current location (and bank) on gosub stack",
    "token": "SUB",
    "modifies": "GO",
    "syntax": "GO SUB x"
  },
  {
    "modifies": "IF",
    "description": "Run statements only if expression c is true",
    "token": "THEN",
    "syntax": "IF c THEN statements.."
  },
  {
    "description": "Sets variable var to expr",
    "token": "LET",
    "syntax": "LET var = expr"
  },
  {
    "description": "Marks end of FOR loop regarding VAR",
    "token": "NEXT",
    "syntax": "NEXT var"
  },
  {
    "description": "Code comment, ignored",
    "token": "REM",
    "syntax": "REM comment"
  },
  {
    "description": "Restore execution location (line and bank) from gosub stack",
    "token": "RETURN",
    "syntax": "RETURN"
  },
  {
    "modifies": "TILE",
    "description": "Draw a section of the tilemap w,h wide (from tile offset x,y in the tilemap) (to tile offset x2,y2 on the screen)",
    "token": "AT",
    "syntax": "TILE w,h [AT x,y]? [TO x2,y2]?"
  },
  {
    "modifies": "TILE",
    "description": "Draw a section of the tilemap w,h wide (from tile offset x,y in the tilemap) (to tile offset x2,y2 on the screen)",
    "token": "TO",
    "syntax": "TILE w,h [AT x,y]? [TO x2,y2]?"
  },
  {
    "description": "Set bank n as the root of tile graphics (which may occupy up to 4 banks in the case of 16x16 tiles).",
    "token": "BANK",
    "modifies": "TILE",
    "syntax": "TILE BANK n"
  },
  {
    "description": "Set bank n offset o as the root of tilemap data, with tilemap width v and tile size t (t must be 8 or 16 for 8x8 or 16x16 tiles)",
    "token": "DIM",
    "modifies": "TILE",
    "syntax": "TILE DIM n, o, v, t"
  },
  {
    "description": "Prints screen",
    "token": "COPY",
    "syntax": "COPY"
  },
  {
    "description": "Returns currently pressed key",
    "token": "INKEY",
    "syntax": "INKEY$"
  },
  {
    "description": "Output expression(s) and read a variable",
    "token": "INPUT",
    "syntax": "INPUT specifier [connector specifier].."
  },

  {
    "modifies": "AT",
    "syntax": "INPUT AT x,y",
    "description": "Moves text cursor to the given text cell",
    "token": "INPUT"
  },
  {
    "modifies": "TAB",
    "syntax": "INPUT TAB x",
    "description": "Inserts spaces until text cursor is in column x",
    "token": "INPUT"
  },
  {
    "modifies": "INK",
    "syntax": "INPUT INK x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "INPUT"
  },
  {
    "modifies": "PAPER",
    "syntax": "INPUT PAPER x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "INPUT"
  },
  {
    "modifies": "LINE",
    "syntax": "INPUT LINE x$",
    "description": "INPUT only, reads a string without the prompting quotes ",
    "token": "INPUT"
  },

  {
    "description": "Enable or disable switching ink/paper color when printing (x=0 or 1)",
    "token": "INVERSE",
    "syntax": "INVERSE x"
  },
  {
    "description": "Output expression(s) to printer",
    "token": "LPRINT",
    "syntax": "LPRINT specifier [connector specifier].."
  },
  {
    "description": "Enable or disable overprinting (x=0 or 1)",
    "token": "OVER",
    "syntax": "OVER x"
  },
  {
    "description": "Waits x frames or until a key is pressed",
    "token": "PAUSE",
    "syntax": "PAUSE x"
  },
  {
    "description": "Output expression(s)",
    "token": "PRINT",
    "syntax": "PRINT specifier [connector specifier].."
  },
  {
    "modifies": "AT",
    "syntax": "PRINT AT x,y",
    "description": "Moves text cursor to the given text cell",
    "token": "PRINT"
  },
  {
    "modifies": "TAB",
    "syntax": "PRINT TAB x",
    "description": "Inserts spaces until text cursor is in column x",
    "token": "PRINT"
  },
  {
    "modifies": "INK",
    "syntax": "PRINT INK x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "PRINT"
  },
  {
    "modifies": "PAPER",
    "syntax": "PRINT PAPER x",
    "description": "Changes the appropriate color for the duration of the print/input statement",
    "token": "PRINT"
  },
  {
    "modifies": "LINE",
    "syntax": "PRINT LINE x$",
    "description": "INPUT only, reads a string without the prompting quotes ",
    "token": "PRINT"
  },
  {
    "description": "Re-enable RAMdisk having been disabled by previous BANK 1346 USR",
    "token": "FORMAT",
    "modifies": "BANK",
    "syntax": "BANK 1346 FORMAT"
  },
  {
    "description": "Disable RAMdisk, allowing banks 1, 3, 4, and 6 to be used",
    "token": "USR",
    "modifies": "BANK,",
    "syntax": "BANK 1346 USR"
  },
  {
    "modifies": "BANK",
    "description": "Copy entire bank b to bank c",
    "token": "TO",
    "syntax": "BANK b COPY TO c"
  },
  {
    "modifies": "BANK",
    "description": "Copy len bytes from start in bank b, to start in bank c",
    "token": "COPY",
    "syntax": "BANK b COPY start, len TO c, start"
  },
  {
    "modifies": "BANK",
    "description": "Erase all data in bank by overwriting with zeros (or x)",
    "token": "ERASE",
    "syntax": "BANK b ERASE x?"
  },
  {
    "modifies": "BANK",
    "description": "Overwrite len bytes of data at off in bank b with value",
    "token": "ERASE",
    "syntax": "BANK b ERASE off, len, value"
  },
  {
    "modifies": "PEEK",
    "description": "Returns value at given address in bank b (address is from start of bank)",
    "token": "BANK",
    "syntax": "BANK b PEEK addr"
  },
  {
    "modifies": "POKE",
    "description": "Sets address in bank b to value (address is from start of bank)",
    "token": "BANK",
    "syntax": "BANK b POKE addr, value"
  },
  {
    "description": "Returns current value at port",
    "token": "IN",
    "syntax": "IN port"
  },
  {
    "description": "Returns value at given address",
    "token": "PEEK",
    "syntax": "PEEK addr"
  },
  {
    "description": "Sets address to value",
    "token": "POKE",
    "syntax": "POKE addr, value"
  },
  {
    "description": "Sends value to port",
    "token": "OUT",
    "syntax": "OUT port, value"
  },
  {
    "modifies": "LINE",
    "description": "Copies lines x,y into bank b. Once this is done, these lines cannot be edited except by overwriting them with another BANK..LINE command. Cannot be used in a program.",
    "token": "BANK",
    "syntax": "BANK b LINE x,y"
  },
  {
    "modifies": "LIST",
    "description": "Lists source code in bank b (from line x)",
    "token": "BANK",
    "syntax": "BANK b LIST x?"
  },
  {
    "modifies": "MERGE",
    "description": "Adds all basic lines in bank b to main program",
    "token": "BANK",
    "syntax": "BANK b MERGE"
  },
  {
    "description": "Repeats last command or restarts from error location",
    "token": "CONTINUE",
    "syntax": "CONTINUE"
  },
  {
    "description": "Resets variables, clears screen, resets plot cursor (and sets ramtop to X)",
    "token": "CLEAR",
    "syntax": "CLEAR x?"
  },
  {
    "description": "Deletes all program lines between f and l. Cannot be used in a program.",
    "token": "ERASE",
    "syntax": "ERASE f, l"
  },
  {
    "description": "Lists source code (from line x)",
    "token": "LIST",
    "syntax": "LIST x?"
  },
  {
    "description": "Lists source code to printer (from line x)",
    "token": "LLIST",
    "syntax": "LLIST x?"
  },
  {
    "description": "Clear stored program",
    "token": "NEW",
    "syntax": "NEW"
  },
  {
    "description": "CLEAR then run program (from line x)",
    "token": "RUN",
    "syntax": "RUN x?"
  },
  {
    "description": "Set ULA border to color N",
    "token": "BORDER",
    "syntax": "BORDER n"
  },
  {
    "description": "Enable or disable bright colors. n must be 0 or 1. Not legal on non-ULA layers or if Enhanced ULA is enabled.",
    "token": "BRIGHT",
    "syntax": "BRIGHT n"
  },
  {
    "description": "Draw circle centered at x, y with radius r",
    "token": "CIRCLE",
    "syntax": "CIRCLE x,y,r"
  },
  {
    "description": "Clears screen",
    "token": "CLS",
    "syntax": "CLS"
  },
  {
    "description": "Draw line from plot cursor to given coordinate",
    "token": "DRAW",
    "syntax": "DRAW [modifies or x,y].."
  },
  {
    "description": "Enable or disable ink/paper cycling. n must be 0 or 1. Not legal on non-ULA layers or if Enhanced ULA is enabled.",
    "token": "FLASH",
    "syntax": "FLASH n"
  },
  {
    "description": "Set ink (foreground) color for print and graphics commands. If Enhanced ULA is enabled, this can use any legal palette value. On Layer 2, it can use any value 0-255.",
    "token": "INK",
    "syntax": "INK c"
  },
  {
    "description": "Selects active layer for graphics operations. LAYER 0 is an unenhanced ULA screen. LAYER 1 is the ULA screen but with enhancements and with the origin at the top left (not the bottom left). LAYER 2 is, well, Layer 2.\n\n1 = Standard Spectrum, 2 = Timex hires, 3 = Timex hicolour, 0 = Lores layer.",
    "token": "LAYER",
    "syntax": "LAYER x"
  },
  {
    "description": "Sets the scroll display offset for the current layer.",
    "token": "AT",
    "modifies": "LAYER",
    "syntax": "LAYER AT x, y"
  },
  {
    "description": "Only when Layer 2 is selected, selects the first bank for layer 2 (f) and shadow layer 2 (b). Note that a layer 2 screen occupies 3 banks.",
    "token": "BANK",
    "modifies": "LAYER",
    "syntax": "LAYER BANK f, b"
  },
  {
    "description": "Resets all layer settings",
    "token": "CLEAR",
    "modifies": "LAYER",
    "syntax": "LAYER CLEAR"
  },
  {
    "description": "Sets visible area for current layer",
    "token": "DIM",
    "modifies": "LAYER",
    "syntax": "LAYER DIM left, top, right, bottom"
  },
  {
    "description": "Fills a region at x,y, of size w,h, with palette index f (or the transparent value)",
    "token": "ERASE",
    "modifies": "LAYER",
    "syntax": "LAYER ERASE x, y, w, h [,f]?"
  },
  {
    "description": "Sets layer ordering",
    "token": "OVER",
    "modifies": "LAYER",
    "syntax": "LAYER OVER"
  },
  {
    "description": "Sets palette index i in palette in to color value v. V is always 9 bit, even if PALETTE DIM 8 is set.",
    "token": "PALETTE",
    "modifies": "LAYER",
    "syntax": "LAYER PALETTE n, i, v"
  },
  {
    "modifies": "LAYER",
    "description": "Loads current layer's palette n (0 or 1) from bytes starting at offset in bank b. If PALETTE DIM 8 is set, each byte is one color. If PALETTE DIM 9 is set, each color needs two bytes, but only one bit of the second is used.",
    "token": "BANK",
    "syntax": "LAYER PALETTE n BANK b, offset"
  },
  {
    "description": "Resets all palettes and palette settings",
    "token": "CLEAR",
    "modifies": "PALETTE",
    "syntax": "PALETTE CLEAR"
  },
  {
    "description": "Sets number of color bits in the active palette; x must be 8 or 9",
    "token": "DIM",
    "modifies": "PALETTE",
    "syntax": "PALETTE DIM x"
  },
  {
    "description": "Enables Enhanced ULA colors with x inks. X must be a bitmask which masks off bits on the right of a value (1, 3, 7, 15, 31, 63, 127 or 255)",
    "token": "FORMAT",
    "modifies": "PALETTE",
    "syntax": "PALETTE FORMAT x"
  },
  {
    "description": "Sets the global transparency color to x",
    "token": "OVER",
    "modifies": "PALETTE",
    "syntax": "PALETTE OVER x"
  },
  {
    "description": "Set paper (background) color for print and graphics commands. Follows the same rules as INK.",
    "token": "PAPER",
    "syntax": "PAPER c"
  },
  {
    "description": "Plot listed points as single pixels on current layer",
    "token": "PLOT",
    "syntax": "PLOT [modifies or x,y].."
  },
  {
    "description": "Stores the color at point x, y on the ULA screen in variable var",
    "token": "POINT",
    "syntax": "POINT x, y, var"
  },
  {
    "description": "Returns the color at point x, y on the ULA screen",
    "token": "POINT",
    "syntax": "POINT x, y"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "AND",
    "syntax": "AND"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "OR",
    "syntax": "OR"
  },
  {
    "description": "Standard boolean conjunctives",
    "token": "NOT",
    "syntax": "NOT"
  },
  {
    "token": "MOD",
    "syntax": "MOD x",
    "description": "Gets the modulo which returns the remainder of a division"
  },
  {
    "description": "Gets unsigned magnitude of x",
    "token": "ABS",
    "syntax": "ABS x"
  },
  {
    "description": "Returns inverse trigonometric ratio (arcsin, arccos, arctan)",
    "token": "ASN",
    "syntax": "ASN x, ACS x, ATN x"
  },
  {
    "description": "Returns inverse trigonometric ratio (arcsin, arccos, arctan)",
    "token": "ACS",
    "syntax": "ASN x, ACS x, ATN x"
  },
  {
    "description": "Returns inverse trigonometric ratio (arcsin, arccos, arctan)",
    "token": "ATN",
    "syntax": "ASN x, ACS x, ATN x"
  },
  {
    "description": "Returns attribute cell value at cell x,y",
    "token": "ATTR",
    "syntax": "ATTR x,y"
  },
  {
    "description": "Converts binary number x to decimal",
    "token": "BIN",
    "syntax": "BIN x"
  },
  {
    "description": "Gets character for an ASCII code",
    "token": "CHR$",
    "syntax": "CHR$ x"
  },
  {
    "description": "Gets ASCII code for a character",
    "token": "CODE",
    "syntax": "CODE x"
  },
  {
    "description": "Rounds x down to integer",
    "token": "INT",
    "syntax": "INT x"
  },
  {
    "description": "Gets length of string",
    "token": "LEN",
    "syntax": "LEN x"
  },
  {
    "description": "Returns approximation of pi",
    "token": "PI",
    "syntax": "PI"
  },
  {
    "description": "Returns a random number between 0 and 1",
    "token": "RND",
    "syntax": "RND"
  },
  {
    "description": "Returns text character in text cell x,y",
    "token": "SCREEN$",
    "syntax": "SCREEN$ x,y"
  },
  {
    "description": "Divides x by its magnitude",
    "token": "SIGN",
    "syntax": "SIGN x"
  },
  {
    "description": "Returns standard trigonometric ratio (sine)",
    "token": "SIN",
    "syntax": "SIN x"
  },
  {
    "description": "Returns standard trigonometric ratio (cosine)",
    "token": "COS",
    "syntax": "COS x"
  },
  {
    "description": "Returns standard trigonometric ratio (tangent)",
    "token": "TAN",
    "syntax": "TAN x"
  },
  {
    "description": "Returns square of x",
    "token": "SQR",
    "syntax": "SQR x"
  },
  {
    "description": "Converts number into a string",
    "token": "STR$",
    "syntax": "STR$ x"
  },
  {
    "description": "If x is a string, gets the address of the first byte of the user defined graphic for the character. If x is a number, runs a machine code routine at address x and returns the value of BC after it exits.",
    "token": "USR",
    "syntax": "USR x"
  },
  {
    "description": "Converts string number or expression into a number",
    "token": "VAL",
    "syntax": "VAL x"
  },
  {
    "description": "Call procedure defined with DEFPROC. The number of expressions and each of their types must match those defined in the DEFPROC, otherwise a Q Parameter Error report will be generated. TO paramlist will copy return values declared by ENDPROC to up to 8 variables.",
    "token": "PROC",
    "syntax": "PROC name (expressionlist) [TO paramlist]",
    "modifies": "TO"
  },
  {
    "syntax": "ENDPROC [= expressionlist]",
    "token": "ENDPROC",
    "description": "Ends execution of a procedure defined with DEFPROC and returns up to 8 local values via the optional expressionlist to the calling PROC command."
  },
  {
    "syntax": "DEFPROC name ([paramlist])",
    "token": "DEFPROC",
    "description": "Defines a procedure, where name follows the same naming rules as standard numeric variables. paramlist is an optional list of up to 8 variable names (simple strings, numeric variables or integer variables, but not arrays of any type). See ENDPROC."
  },
  {
    "token": "OVER",
    "modifies": "SPRITE",
    "syntax": "%SPRITE OVER(s1, s2 [TO s3] [,overlapX [,overlapY] ])",
    "description": "Performs bounding-box collision detection between sprite s1, and a single other sprite s2 or a range of sprites s2..s3."
  },
  {
    "token": "AT",
    "modifies": "SPRITE",
    "syntax": "%SPRITE AT(s,c)",
    "description": "Returns a coordinate or other movement-related value for the sprite:\n %SPRITE AT(s,0) returns x coordinate\n %SPRITE AT(s,1) returns y coordinate\n %SPRITE AT(s,2) returns pattern number\n %SPRITE AT(s,3) returns x step\n %SPRITE AT(s,4) returns y step\n %SPRITE AT(s,5) returns delay before the sprite next moves\n (0 means the sprite will move on the next SPRITE MOVE command)"
  },
  {
    "token": "CONTINUE",
    "modifies": "SPRITE",
    "syntax": "SPRITE CONTINUE s, [x1 [TO x2]] [STEP xs] [RUN or STOP], [y1 [TO y2]] [STEP ys] [RUN or STOP], [p1 [TO p2]], [f], [r], [d]",
    "description": "Turns automatic movement back on for a sprite"
  },
  {
    "token": "PAUSE",
    "modifies": "SPRITE",
    "syntax": "SPRITE PAUSE s1 [TO s2]",
    "description": "Turns off automatic movement for a single sprite or range of sprites."
  },
  {
    "syntax": "SPRITE STOP",
    "description": "Turns off immediate updates and enables batching mode.",
    "modifies": "SPRITE",
    "token": "STOP"
  },
  {
    "syntax": "SPRITE RUN",
    "description": "Turns immediate updates back on, disabling batching mode (this is also done by the SPRITE CLEAR command).",
    "modifies": "SPRITE",
    "token": "RUN"
  },
  {
    "syntax": "SPRITE MOVE",
    "description": "When batching mode is enabled, sends all outstanding sprite changes to the hardware immediately.",
    "modifies": "SPRITE",
    "token": "MOVE"
  },
  {
    "syntax": "SPRITE MOVE INT [y]",
    "description": "The same as SPRITE MOVE, but first waits for the 50/60Hz interrupt. With optional y changes are not sent to the hardware until after the TV scanline corresponding to sprite coordinate y. This can be used to avoid flicker by ensuring sprite changes don't occur whilst the TV is midway through displaying the sprite(s) in question.",
    "modifies": "SPRITE",
    "token": "INT"
  }
]
